<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.0</version>
    </parent>

    <groupId>com.lightframework</groupId>
    <artifactId>lightframework</artifactId>
    <version>${revision}</version>
    <modules>
        <module>light-common</module>
        <module>light-core</module>
        <module>light-auth</module>
        <module>light-websocket</module>
        <module>light-database</module>
        <module>light-starter</module>
        <module>light-util</module>
        <module>light-system-log</module>
        <module>light-plugin</module>
        <module>light-parent</module>
    </modules>
    <packaging>pom</packaging>
    <description>微框架,用于解决开发过程中重复的工作，提高效率，不容易出错，
        此项目提供快速生成新项目结构需要的文件，统一的公共配置（如：MAVEN私服、MAVEN打包插件等配置），高内聚低耦合的可插拔公共功能模块 ，
        依赖版本统一管理与依赖版本兼容解决，项目版本管理，更实用的工具类，让项目代码变得整洁
    </description>

    <properties>
        <revision>1.0</revision>
        <lightframework.version>${revision}</lightframework.version>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <fastjson2.version>2.0.27</fastjson2.version>
        <clickhouse.version>0.4.6</clickhouse.version>
        <jsch.version>0.1.55</jsch.version>
        <commons-net.version>3.8.0</commons-net.version>
        <commons-io.version>2.11.0</commons-io.version>
        <flatten.version>1.4.1</flatten.version>
        <maven.version>3.9.4</maven.version>
        <maven-plugin.version>3.9.0</maven-plugin.version>
        <hutool.version>5.8.21</hutool.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.alibaba.fastjson2</groupId>
                <artifactId>fastjson2</artifactId>
                <version>${fastjson2.version}</version>
            </dependency>
            <dependency>
                <groupId>com.clickhouse</groupId>
                <artifactId>clickhouse-jdbc</artifactId>
                <version>${clickhouse.version}</version>
                <classifier>all</classifier>
            </dependency>
            <dependency>
                <groupId>com.jcraft</groupId>
                <artifactId>jsch</artifactId>
                <version>${jsch.version}</version>
            </dependency>
            <dependency>
                <groupId>commons-net</groupId>
                <artifactId>commons-net</artifactId>
                <version>${commons-net.version}</version>
            </dependency>
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>${commons-io.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.maven</groupId>
                <artifactId>maven-core</artifactId>
                <version>${maven.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.maven</groupId>
                <artifactId>maven-model</artifactId>
                <version>${maven.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.maven</groupId>
                <artifactId>maven-plugin-api</artifactId>
                <version>${maven.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.maven.plugin-tools</groupId>
                <artifactId>maven-plugin-annotations</artifactId>
                <version>${maven-plugin.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-all</artifactId>
                <version>${hutool.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <!--    maven版本管理插件        -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <version>${flatten.version}</version>
                <configuration>
                    <updatePomFile>true</updatePomFile>
                    <flattenMode>resolveCiFriendliesOnly</flattenMode>
                </configuration>
                <executions>
                    <execution>
                        <id>flatten</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>flatten</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>flatten.clean</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <!-- 需要配合settings配置文件使用，并且id一致 -->
            <id>NEXUS-YuLing</id>
            <distributionManagement>
                <!-- 注意： maven会判断工程版本version后面是否带了-SNAPSHOT，如果带了就发布到snapshots仓库，否则发布到release仓库。-->
                <repository>
                    <!--id任意，在setting文件中<server>的ID与这里一致-->
                    <id>${nexus.name}</id>
                    <name>${nexus.name} Releases</name>
                    <!--指向仓库类型为host(宿主仓库）的储存类型为Release的仓库-->
                    <url>${nexus.url}/repository/maven-releases/</url>
                </repository>
                <snapshotRepository>
                    <id>${nexus.name}</id>
                    <name>${nexus.name} Snapshots</name>
                    <!--指向仓库类型为host(宿主仓库）的储存类型为Snapshot的仓库-->
                    <url>${nexus.url}/repository/maven-snapshots/</url>
                </snapshotRepository>
            </distributionManagement>
        </profile>
        <profile>
            <!-- 需要配合settings配置文件使用，并且id一致 -->
            <id>NEXUS-CongXing</id>
            <distributionManagement>
                <!-- 注意： maven会判断工程版本version后面是否带了-SNAPSHOT，如果带了就发布到snapshots仓库，否则发布到release仓库。-->
                <repository>
                    <!--id任意，在setting文件中<server>的ID与这里一致-->
                    <id>${nexus.name}</id>
                    <name>${nexus.name} Releases</name>
                    <!--指向仓库类型为host(宿主仓库）的储存类型为Release的仓库-->
                    <url>${nexus.url}/repository/maven-releases/</url>
                </repository>
                <snapshotRepository>
                    <id>${nexus.name}</id>
                    <name>${nexus.name} Snapshots</name>
                    <!--指向仓库类型为host(宿主仓库）的储存类型为Snapshot的仓库-->
                    <url>${nexus.url}/repository/maven-snapshots/</url>
                </snapshotRepository>
            </distributionManagement>
        </profile>
    </profiles>
</project>